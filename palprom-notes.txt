 // Switch points for Computer Concept 32k PALPROM
wire acc2Bk0 = a806x || aBFCx;
wire acc2Bk1 = a804x || aBFAx || aBFEx;

Without having done a full disassembly:

ROM 1 appears mostly full but it may be that BFCx is unused space, in which case it won't accidentally trip the switch point there (the other BFxx switch points would be fine anyway if this is bank 1)
ROM 2 looks like it has fragments of the assembler source starting at &B4C8, so it is probably empty from there and thus won't accidentally trip the BFxx switch points

Both ROMs have service handler code at 804x, so we'd need to relocate this in one of them and move it into free space at the end. Since ROM 2 looks much emptier, this suggests that we choose:
ROM 1 == bank 1
ROM 2 == bank 0
CHANGE: ROM 2's service handler needs to move away from 804x

CHANGE: ROM 1's code needs simple patching to avoid 806x




Is this never going to work? We have EVNTV (and KEYV?) "constantly" paging in bank 0 with the support ROM. This means any code executing in the main ROM in bank 1 is going to get paged out for "interrupts" and won't be restored. Maybe I'm missing something, because while this feels like something that could well be going wrong, I'd have expected crashes rather than the system seeming to be tying itself doing something semi-reasonable but possibly in a large infinite loop or something.
- it feels a bit clunky but is there any prospect of installing these interrupt handlers to run at a non-switching address which is duplicated in both banks and *then* have them JSR to the bank switching address, and then after the JSR returns do a dummy write to "the current bank's" switching zone to ensure the previous bank is paged in before the interrupt returns? This might work, need to chew it over a bit. Obviously interrupts *from other ROMs* which trigger service calls are going to break this irreversibly, but I am not sure that is really going to be a big thing - if this was really a concern, I'm not sure a PALPROM could work at all because it would be happily running code from one bank or the other as (say) the current language and then an interrupt would blow its bank selection away. Even if the PALPROM's service handler only ever used one bank, there would still be a switch and you could never run code from the other bank without fear of an interrupt triggering a service and losing the code you're running.



OK, the OSBGET at &A9AB is leaving the wrong bank paged in, *probably* because it issues NMI service calls.
Do we need the same kind of trickery we are doing for "interrupts" in order to preserve the currently selected bank across service handler entries?



./mame bbcb -rom2 /tmp/Stop_Press_Watford_Release_ROM/STOPPR1.rom -rom3 /tmp/Stop_Press_Watford_Release_ROM/STOPPR2.rom  -flop1 /tmp/Stop_Press_Watford_Release_DISCS/System_Disc.ssd -flop2 /tmp/Stop_Press_Watford_Release_DISCS/Font_Demo_Disc.ssd

./mame -debug bbcb -rom2 iword -flop1 /tmp/Stop_Press_Watford_Release_DISCS/System_Disc.ssd -flop2 /tmp/Stop_Press_Watford_Release_DISCS/Font_Demo_Disc.ssd

/bin/cp stop-press-palprom.rom InterWord-1.02.rom; zip -9vr ~/src/mame0269/roms/bbc_rom/iword.zip InterWord-1.02.rom
